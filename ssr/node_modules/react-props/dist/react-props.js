(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["ReactProps"] = factory(require("react"));
	else
		root["ReactProps"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var isType = function isType(type) {
		return function (obj) {
			return obj != null && Object.prototype.toString.call(obj) === '[object ' + type + ']';
		};
	};
	var isObj = isType('Object');
	var isStr = isType('String');
	var isFn = isType('Function');
	var isArr = Array.isArray || isType('Array');

	// state
	var $getState = function $getState() {};
	var $actions = {};
	var $selectors = {};
	var $components = {};
	var $match = undefined;

	var setFluxConfig = function setFluxConfig(_ref) {
		var getState = _ref.getState;
		var selectors = _ref.selectors;
		var actions = _ref.actions;
		var match = _ref.match;

		addSelectors(selectors);
		$getState = getState;
		$actions = actions;
		$match = match;
	};

	exports.setFluxConfig = setFluxConfig;
	var handleAction = function handleAction(data) {
		if (!isFn($match)) {
			return;
		}
		var result = $match(data);
		switch (true) {
			case isObj(result):
				var name = result.name,
				    callback = result.callback;

				if (isArr(name)) {
					name.forEach(item = eachComponent(item, callback));
				} else {
					eachComponent(name, callback);
				}
				break;
			case isStr(result):
				renderCompoent(result);
				break;
			case isArr(result):
				result.forEach(renderCompoent);
				break;
		}
	};

	exports.handleAction = handleAction;
	var updater = {
		DID_UPDATE: function DID_UPDATE(data) {
			handleAction(data);
			return data;
		}
	};

	exports.updater = updater;
	var bindReducer = function bindReducer(reducer) {
		return function (state, action) {
			var nextState = reducer(state, action);
			var $$getState = $getState;
			$getState = function () {
				return nextState;
			};
			handleAction({
				state: state,
				nextState: nextState,
				action: action
			});
			$getState = $$getState;
			return nextState;
		};
	};

	exports.bindReducer = bindReducer;
	// selector
	var addSelectors = function addSelectors(obj) {
		Object.keys(obj).forEach(function (key) {
			var query = obj[key];
			if (!isFn(query)) {
				return;
			}
			$selectors[key] = function (props) {
				for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
					args[_key - 1] = arguments[_key];
				}

				var state = $getState();
				return query.apply(undefined, [state, $actions, props].concat(args));
			};
		});
	};

	var addComponent = function addComponent(name, component) {
		if (!isArr($components[name])) {
			$components[name] = [];
		}
		$components[name].push(component);
	};

	var removeComponent = function removeComponent(name, component) {
		var components = $components[name];
		if (!isArr(components)) {
			return;
		}
		var index = components.indexOf(component);
		if (index !== -1) {
			components.splice(index, 1);
		}
	};

	var getComponents = function getComponents(name) {
		var components = $components[name];
		return isArr(components) ? components : [];
	};

	var eachComponent = function eachComponent(name, fn) {
		getComponents(name).forEach(fn);
	};

	var forceUpdate = function forceUpdate(component) {
		return component.forceUpdate();
	};
	var renderCompoent = function renderCompoent(name) {
		getComponents(name).forEach(forceUpdate);
	};

	var injectProps = function injectProps(name) {
		for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
			args[_key2 - 1] = arguments[_key2];
		}

		return function (Component) {
			name = name || Component.name;

			var Injector = (function (_React$Component) {
				_inherits(Injector, _React$Component);

				function Injector() {
					_classCallCheck(this, Injector);

					_get(Object.getPrototypeOf(Injector.prototype), 'constructor', this).apply(this, arguments);
				}

				_createClass(Injector, [{
					key: 'componentDidMount',
					value: function componentDidMount() {
						addComponent(name, this);
					}
				}, {
					key: 'componentWillUnmount',
					value: function componentWillUnmount() {
						removeComponent(name, this);
					}
				}, {
					key: 'render',
					value: function render() {
						var selector = $selectors[name];
						var props = {};
						if (isFn(selector)) {
							props = selector.apply(undefined, [this.props].concat(args));
						}
						return _react2['default'].createElement(Component, _extends({}, this.props, props));
					}
				}]);

				return Injector;
			})(_react2['default'].Component);

			Object.defineProperties(Injector, {
				propTypes: {
					set: function set(propTypes) {
						Component.propTypes = propTypes;
					}
				},
				defaultProps: {
					set: function set(defaultProps) {
						Component.defaultProps = defaultProps;
					}
				}
			});
			return Injector;
		};
	};
	exports.injectProps = injectProps;

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }
/******/ ])
});
;